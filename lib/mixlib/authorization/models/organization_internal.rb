#
# Author:: Tim Hinderliter <tim@opscode.com>
#
# Copyright 2010, Opscode, Inc.
#
# All rights reserved - do not redistribute
#

module Mixlib
  module Authorization
    module Models
      class OrganizationInternal < CouchRest::ExtendedDocument
        include CouchRest::Validation
        
        use_database Mixlib::Authorization::Config.internal_database

        view_by :organization_guid
        
        property :organization_guid
        
        validates_present :organization_guid
        
        # TODO: timh: should validate with :valid_organization_guid?, and check to
        # ensure the organization exists in opscode_account
        validates_with_method :organization_guid, :unique_organization_guid?

        auto_validate!
        
        def self.find_unallocated_organization
          Mixlib::Authorization::Log.info("find_unallocated_organization")
          result = by_organization_guid
          Mixlib::Authorization::Log.info("find_unallocated_organization: by_organization_guid returned #{result.inspect}")
          
          how_many = result.length
          if how_many > 0
            res = result[0]
            Mixlib::Authorization::Log.info("find_unallocated_organization: returning #{res}")
            res
          else
            Mixlib::Authorization::Log.info("find_unallocated_organization: returning NOTHING, no unallocated organizations")
            nil
          end
        end
        
        def unique_organization_guid?
          result = OrganizationInternal.by_organization_guid(:key => self["organization_guid"], :include_docs => false)
          how_many = result["rows"].length
          
          if how_many == 0
            true
          else
            [ false, "The organization guid #{self['organization_guid']} is not unique!" ]
          end
        end
        
        def for_json
          self.properties.inject({ }) do |result, prop|
            pname = prop.name.to_sym
            #BUGBUG - I hate stripping properties like this.  We should do it differently [cb]      
            result[pname] = self.send(pname) unless pname == :requester_id
            result
          end
        end

        # make the given organization unallocated - this is done when the temporary 
        # organization is done being generated by the midgets.
        def make_unallocated
          save
        end

        # make the given organization allocated - this is done once the organization
        # has been handed off to a real organization.
        def make_allocated
          destroy
        end
        
      end
    end
  end
end
